Do livro Haskell 3rd edition: The craft of functional programming, 3d ed, os exercícios
9.5, 9.6, 9.7, 9.9, 9.11,
11.25, 11.26, 11.29, 11.32 e 11.33

 =========================================================================
           ====================== CAP 9 =========================
 9.5
Caso Base:
(I)        sum ([] ++ ys) == sum ys

(II)       sum [] + sum ys == 0 + sum ys == sum ys
    (I) == (II)

Indução
    (III):
        sum ((x : xs) ++ ys) == sum ([x] ++ xs ++ ys) == x + sum (xs ++ ys)
        == x + sum xs + sum ys
    (IV):
        sum (x : xs) + sum ys == x + sum xs + sum ys == x + sum (xs ++ ys)
    (III) == (IV)

--========================================================================

9.6
xs ++ [] == xs
Caso Base:
    [] ++ [] == LHS
    [] == RHS
    [] == [] ++ []
    LHS == RHS
Indução:
    (x : xs) ++ [] == (x : (xs ++ []))   (I)
    hipótese: \-/x  xs ++ [] == xs
    Aplicação da hipótese:
     == (x : xs)                         (II)

xs ++ (ys ++ zs) == (xs ++ ys) ++ zs

Caso Base:
    [] ++ (ys ++ zs) == (ys ++ zs) == ([] ++ ys) ++ zs
Indução:
    Teorema: (x : xs) ++ ps == x : (xs ++ ps)
    (x : xs) ++ (ys ++ zs) == x : (xs ++ (ys ++ zs)) == x : ((xs ++ ys) ++ zs)
    == (x : (xs ++ ys) ++ zs) == (((x : xs) ++ ys) ++ zs)
--========================================================================

9.7
sum (reverse xs) == sum xs

Caso Base:
    sum (reverse []) == 0 == sum []
Indução:
    sum (reverse (x : xs)) == sum (xs ++ [x]) == x + sum xs    (I)
    sum (x : xs) == x + sum xs                                 (II)
    (I) == (II)

length (reverse xs) == length xs

Caso Base:
    length (reverse []) == length [] == 0
Indução:
    length (reverse (x : xs)) == length (xs ++ [x]) == 1 + length xs   (I)
    length (x : xs) == 1 + length xs                                   (II)
    (I) == (II)

--=========================================================================

9.9
zip (fst (unzip ps)) (snd (unzip ps)) == ps

Caso Base:
    zip (fst (unzip ([], []))) (snd (unzip ([], []))) == zip [] [] == ([], [])

Indução:
    zip (fst (unzip (x : xs, y : ys))) (snd (unzip (x : xs, y : ys)))
    == zip (x : xs) (y : ys) == (x : xs, y : ys)

--=========================================================================
9.11

   9.5:
     propSumPlusPlus :: [Int]->[Int] -> Bool
     propSumPlusPlus xs ys = sum (xs ++ ys) == sum xs + sum ys

   9.6:
     propPlusPlus :: [Int]->[Int] -> Bool
     propPlusPlus xs ys = xs ++ ( ys ++ zs ) == ( xs ++ ys ) ++ zs

   9.7:
     propSumRev :: [Int] -> Bool
     propSumrev xs = sum ( reverse xs ) == sum xs

     propLengthRev :: [Int] -> Bool
     propLengthRev xs = length ( reverse xs ) == length xs

   9.9:
     propZip :: [Int]->[Int] -> Bool
     propZip xs ys = zip ( fst xs ys ) (snd xs ys ) == (xs,ys)

--=========================================================================
           ====================== CAP 11 =========================
 
 1.25
Usando o princípio da extensionalidade, mostre que a composição de funções 
é associativa: para todo f, g e h, conforme abaixo.

f . ( g . h ) = ( f . g ) . h

f . ( g . h )   primeiro membro (I)
( f . g ) . h   segundo membro (II)

(I): 
 f . ( g . h ) = f . g ( h ) = f ( g ( h )) = f ( g ( h x ))

(II):
 ( f . g ) . h = ( f ( g ) ) . h = ( f ( g ( h ))) = f ( g ( h )) 
 = f ( g ( h x ))

 ( I ) == ( II )
--=========================================================================
11.26
Mostre que para todo f, 

id . f = f

Solução:
   id . f = f => id ( f ) = f => id ( f x ) = f x 
   Logo, id ( f ) = id . f = f
--=========================================================================
11.29
Usando indução, prove que para todo número natural n,

iter n id = id

Solução:
 iter é definido como sendo:
iter :: Integer -> (a -> a) -> (a -> a)
iter n f
   | n > 0  = f . iter (n-1) f
   | otherwise = id
continuarei .... ( são 02:37 da manhã, depois continuo ;)  )
